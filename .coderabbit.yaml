# CodeRabbit Configuration Template
# Complete reference: https://docs.coderabbit.ai/reference/configuration
# Copy this file to .coderabbit.yaml in your repository root

# =============================================================================
# GLOBAL SETTINGS
# These settings apply to your entire CodeRabbit configuration
# =============================================================================

language: "en-US"
tone_instructions: "you must talk like dwight from the office"
early_access: true
enable_free_tier: true

reviews:
  profile: "assertive"
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: false
  auto_title_placeholder: "@coderabbitai"
  auto_title_instructions: ""
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: false
  suggested_reviewers: true
  auto_assign_reviewers: false
  poem: true

  # Labeling Instructions | Provide guidelines for suggesting labels for the PR/MR. When specific labels or instructions are provided, only those labels are considered, though previous examples are still used to inform the suggestions. If no such labels are provided, suggestions are based solely on previous PR/MRs.
  labeling_instructions: []

  # Default: []
  path_filters: []

  # Path Instructions | Provide specific additional guidelines for code review based on file paths.
  # Default: []
  path_instructions: []

  # Abort the in-progress review if the pull request is closed or merged.
  # Default: true
  abort_on_close: true

  # Disable caching of code and dependencies. This will force CodeRabbit to download the code and dependencies fresh from the repository each time.
  # Default: false
  disable_cache: false

  # Configuration for auto review
  # Default: {}
  auto_review:

    # Automatic Review | Automatic code review
    # Default: true
    enabled: true

    # Automatic Incremental Review | Automatic incremental code review on each push
    # Default: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: true
    base_branches: []
    ignore_usernames: []
  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true
  pre_merge_checks:
    docstrings:
      mode: "warning"
      threshold: 80
    title:
      mode: "warning"
      requirements: ""
    description:
      mode: "warning"
    issue_assessment:
      mode: "warning"
  tools:
    ast-grep:
      rule_dirs: []
      util_dirs: []
      essential_rules: true
      packages: []
    shellcheck:
      enabled: true
    ruff:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
      enabled_only: false
      level: "default"
    biome:
      enabled: true
    hadolint:
      enabled: true
    swiftlint:
      enabled: true

      # Optional path to the SwiftLint configuration file relative to the repository. This is useful when the configuration file is named differently than the default '.swiftlint.yml' or '.swiftlint.yaml'.
      config_file: "example-value"

    # PHPStan is a tool to analyze PHP code.
    # Default: {}
    phpstan:

      # Enable PHPStan | PHPStan requires [config file](https://phpstan.org/config-reference#config-file) in your repository root. Please ensure that this file contains the `paths:` parameter. | v2.1.17
      # Default: true
      enabled: true

      # Level | Specify the [rule level](https://phpstan.org/user-guide/rule-levels) to run. This setting is ignored if your configuration file already has a `level:` parameter.
      # Options: default, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, max
      # Default: "default"
      level: "default"

    # PHPMD is a tool to find potential problems in PHP code.
    # Default: {}
    phpmd:

      # Enable PHPMD | PHPMD is a tool to find potential problems in PHP code. | v2.15.0
      # Default: true
      enabled: true

    # PHP CodeSniffer is a PHP linter and coding standard checker.
    # Default: {}
    phpcs:

      # Enable PHP CodeSniffer | PHP CodeSniffer is a PHP linter and coding standard checker. | v3.7.2
      # Default: true
      enabled: true

    # golangci-lint is a fast linters runner for Go.
    # Default: {}
    golangci-lint:

      # Enable golangci-lint | golangci-lint is a fast linters runner for Go. | Enable golangci-lint integration. | v2.2.2
      # Default: true
      enabled: true

      # Optional path to the golangci-lint configuration file relative to the repository. Useful when the configuration file is named differently than the default '.golangci.yml', '.golangci.yaml', '.golangci.toml', '.golangci.json'.
      config_file: "example-value"

    # YAMLlint is a linter for YAML files.
    # Default: {}
    yamllint:

      # Enable YAMLlint | YAMLlint is a linter for YAML files. | Enable YAMLlint integration. | v1.37.1
      # Default: true
      enabled: true

    # Gitleaks is a secret scanner.
    # Default: {}
    gitleaks:

      # Enable Gitleaks | Gitleaks is a secret scanner. | Enable Gitleaks integration. | v8.27.2
      # Default: true
      enabled: true

    # Checkov is a static code analysis tool for infrastructure-as-code files.
    # Default: {}
    checkov:

      # Enable Checkov | Checkov is a static code analysis tool for infrastructure-as-code files. | v3.2.334
      # Default: true
      enabled: true

    # Detekt is a static code analysis tool for Kotlin files.
    # Default: {}
    detekt:

      # Enable detekt | detekt is a static code analysis tool for Kotlin files. | v1.23.8
      # Default: true
      enabled: true

      # Optional path to the detekt configuration file relative to the repository.
      config_file: "example-value"

    # ESLint is a static code analysis tool for JavaScript files.
    # Default: {}
    eslint:

      # Enable ESLint | ESLint is a static code analysis tool for JavaScript files.
      # Default: true
      enabled: true

    # Flake8 is a Python linter that wraps PyFlakes, pycodestyle and Ned Batchelder's McCabe script.
    # Default: {}
    flake8:

      # Enable Flake8 | Flake8 is a Python linter that wraps PyFlakes, pycodestyle and Ned Batchelder's McCabe script. | v7.2.0
      # Default: true
      enabled: true

    # RuboCop is a Ruby static code analyzer (a.k.a. linter ) and code formatter.
    # Default: {}
    rubocop:

      # Enable RuboCop | RuboCop is a Ruby static code analyzer (a.k.a. linter ) and code formatter. | v1.76.1
      # Default: true
      enabled: true

    # Buf offers linting for Protobuf files.
    # Default: {}
    buf:

      # Enable Buf | Buf offers linting for Protobuf files. | v1.55.1
      # Default: true
      enabled: true

    # Regal is a linter and language server for Rego.
    # Default: {}
    regal:

      # Enable Regal | Regal is a linter and language server for Rego. | v0.35.1
      # Default: true
      enabled: true

    # actionlint is a static checker for GitHub Actions workflow files.
    # Default: {}
    actionlint:

      # Enable actionlint | is a static checker for GitHub Actions workflow files. | v1.7.7
      # Default: true
      enabled: true

    # PMD is an extensible multilanguage static code analyzer. Itâ€™s mainly concerned with Java.
    # Default: {}
    pmd:
      enabled: true
      config_file: "example-value"
    cppcheck:
      enabled: true
    semgrep:
      enabled: true
      config_file: "example-value"

    # CircleCI tool is a static checker for CircleCI config files.
    # Default: {}
    circleci:
      enabled: true
    clippy:
      enabled: true
    sqlfluff:
      enabled: true
    prismaLint:
      enabled: true
    pylint:
      enabled: true
    oxc:
      enabled: true
    shopifyThemeCheck:
      enabled: true
    luacheck:
      enabled: true
    brakeman:
      enabled: true
    dotenvLint:
      enabled: true
    htmlhint:
      enabled: true
    checkmake:
      enabled: true
    osvScanner:
      enabled: true

# =============================================================================
# CHAT
# Configuration for chat
# =============================================================================

# Configuration for chat
# Default: {}
chat:

  # Generate art in response to chat messages. CodeRabbit expresses emotions as either ASCII or Emoji art.
  # Default: true
  art: true

  # Enable the bot to reply automatically without requiring the user to tag it.
  # Default: true
  auto_reply: true

  # Configuration for integrations
  # Default: {}
  integrations:

    # Configuration for linear
    # Default: {}
    linear:

      # Linear | Enable the Linear integration for opening issues, etc. 'auto' disables the integration for public repositories.
      # Options: auto, enabled, disabled
      # Default: "auto"
      usage: "auto"

# =============================================================================
# KNOWLEDGE BASE
# Configuration for knowledge base
# =============================================================================

# Configuration for knowledge base
# Default: {}
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  code_guidelines:
    enabled: true

    # File Patterns | Specify files for your coding guideline documents in this section. CodeRabbit will scan these files to understand your team's standards and apply them during code reviews. Multiple files supported. File names are case-sensitive. Common files like: (**/.cursorrules, .github/copilot-instructions.md, .github/instructions/*.instructions.md, **/CLAUDE.md, **/GEMINI.md, **/.cursor/rules/*, **/.windsurfrules, **/.clinerules/*, **/.rules/*, **/AGENT.md) are included by default.
    # Default: []
    filePatterns: []

  # Configuration for learnings
  # Default: {}
  learnings:

    # Learnings | Specify the scope of learnings to use for the knowledge base. 'local' uses the repository's learnings, 'global' uses the organization's learnings, and 'auto' uses repository's learnings for public repositories and organization's learnings for private repositories.
    # Options: local, global, auto
    # Default: "auto"
    scope: "auto"

  # Configuration for issues
  # Default: {}
  issues:
    scope: "auto"
  linear:
    usage: "auto"
    team_keys: []
  pull_requests:
    scope: "auto"

  # Configuration for mcp
  # Default: {}
  mcp:

    # MCP | Enable the MCP knowledge base integration. 'auto' disables the integration for public repositories.
    # Options: auto, enabled, disabled
    # Default: "auto"
    usage: "auto"

    # MCP Disabled Servers | Specify MCP server labels to disable (case-insensitive). These servers will be excluded from reviews and knowledge base queries.
    # Default: []
    disabled_servers: []

# =============================================================================
# CODE GENERATION
# Configuration for code generation
# =============================================================================

# Configuration for code generation
# Default: {}
code_generation:
  docstrings:
    language: "en-US"
    path_instructions: []
  unit_tests:
    path_instructions: []
